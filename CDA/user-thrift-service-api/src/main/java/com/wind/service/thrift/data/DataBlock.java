/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wind.service.thrift.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-25")
public class DataBlock implements org.apache.thrift.TBase<DataBlock, DataBlock._Fields>, java.io.Serializable, Cloneable, Comparable<DataBlock> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataBlock");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONFIRMED_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmedList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RADAR_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("radarNumber", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DataBlockStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DataBlockTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> confirmedList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> radarNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    CONFIRMED_LIST((short)2, "confirmedList"),
    RADAR_NUMBER((short)3, "radarNumber");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // CONFIRMED_LIST
          return CONFIRMED_LIST;
        case 3: // RADAR_NUMBER
          return RADAR_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIRMED_LIST, new org.apache.thrift.meta_data.FieldMetaData("confirmedList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RADAR_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("radarNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataBlock.class, metaDataMap);
  }

  public DataBlock() {
  }

  public DataBlock(
    java.lang.String name,
    java.util.List<java.lang.Integer> confirmedList,
    java.util.List<java.lang.Integer> radarNumber)
  {
    this();
    this.name = name;
    this.confirmedList = confirmedList;
    this.radarNumber = radarNumber;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataBlock(DataBlock other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetConfirmedList()) {
      java.util.List<java.lang.Integer> __this__confirmedList = new java.util.ArrayList<java.lang.Integer>(other.confirmedList);
      this.confirmedList = __this__confirmedList;
    }
    if (other.isSetRadarNumber()) {
      java.util.List<java.lang.Integer> __this__radarNumber = new java.util.ArrayList<java.lang.Integer>(other.radarNumber);
      this.radarNumber = __this__radarNumber;
    }
  }

  public DataBlock deepCopy() {
    return new DataBlock(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.confirmedList = null;
    this.radarNumber = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public DataBlock setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getConfirmedListSize() {
    return (this.confirmedList == null) ? 0 : this.confirmedList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getConfirmedListIterator() {
    return (this.confirmedList == null) ? null : this.confirmedList.iterator();
  }

  public void addToConfirmedList(int elem) {
    if (this.confirmedList == null) {
      this.confirmedList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.confirmedList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getConfirmedList() {
    return this.confirmedList;
  }

  public DataBlock setConfirmedList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> confirmedList) {
    this.confirmedList = confirmedList;
    return this;
  }

  public void unsetConfirmedList() {
    this.confirmedList = null;
  }

  /** Returns true if field confirmedList is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmedList() {
    return this.confirmedList != null;
  }

  public void setConfirmedListIsSet(boolean value) {
    if (!value) {
      this.confirmedList = null;
    }
  }

  public int getRadarNumberSize() {
    return (this.radarNumber == null) ? 0 : this.radarNumber.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getRadarNumberIterator() {
    return (this.radarNumber == null) ? null : this.radarNumber.iterator();
  }

  public void addToRadarNumber(int elem) {
    if (this.radarNumber == null) {
      this.radarNumber = new java.util.ArrayList<java.lang.Integer>();
    }
    this.radarNumber.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getRadarNumber() {
    return this.radarNumber;
  }

  public DataBlock setRadarNumber(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> radarNumber) {
    this.radarNumber = radarNumber;
    return this;
  }

  public void unsetRadarNumber() {
    this.radarNumber = null;
  }

  /** Returns true if field radarNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRadarNumber() {
    return this.radarNumber != null;
  }

  public void setRadarNumberIsSet(boolean value) {
    if (!value) {
      this.radarNumber = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case CONFIRMED_LIST:
      if (value == null) {
        unsetConfirmedList();
      } else {
        setConfirmedList((java.util.List<java.lang.Integer>)value);
      }
      break;

    case RADAR_NUMBER:
      if (value == null) {
        unsetRadarNumber();
      } else {
        setRadarNumber((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case CONFIRMED_LIST:
      return getConfirmedList();

    case RADAR_NUMBER:
      return getRadarNumber();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case CONFIRMED_LIST:
      return isSetConfirmedList();
    case RADAR_NUMBER:
      return isSetRadarNumber();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DataBlock)
      return this.equals((DataBlock)that);
    return false;
  }

  public boolean equals(DataBlock that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_confirmedList = true && this.isSetConfirmedList();
    boolean that_present_confirmedList = true && that.isSetConfirmedList();
    if (this_present_confirmedList || that_present_confirmedList) {
      if (!(this_present_confirmedList && that_present_confirmedList))
        return false;
      if (!this.confirmedList.equals(that.confirmedList))
        return false;
    }

    boolean this_present_radarNumber = true && this.isSetRadarNumber();
    boolean that_present_radarNumber = true && that.isSetRadarNumber();
    if (this_present_radarNumber || that_present_radarNumber) {
      if (!(this_present_radarNumber && that_present_radarNumber))
        return false;
      if (!this.radarNumber.equals(that.radarNumber))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfirmedList()) ? 131071 : 524287);
    if (isSetConfirmedList())
      hashCode = hashCode * 8191 + confirmedList.hashCode();

    hashCode = hashCode * 8191 + ((isSetRadarNumber()) ? 131071 : 524287);
    if (isSetRadarNumber())
      hashCode = hashCode * 8191 + radarNumber.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DataBlock other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfirmedList()).compareTo(other.isSetConfirmedList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmedList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmedList, other.confirmedList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRadarNumber()).compareTo(other.isSetRadarNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRadarNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radarNumber, other.radarNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DataBlock(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmedList:");
    if (this.confirmedList == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmedList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("radarNumber:");
    if (this.radarNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.radarNumber);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataBlockStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DataBlockStandardScheme getScheme() {
      return new DataBlockStandardScheme();
    }
  }

  private static class DataBlockStandardScheme extends org.apache.thrift.scheme.StandardScheme<DataBlock> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataBlock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONFIRMED_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.confirmedList = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.confirmedList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setConfirmedListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RADAR_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.radarNumber = new java.util.ArrayList<java.lang.Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.radarNumber.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setRadarNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataBlock struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.confirmedList != null) {
        oprot.writeFieldBegin(CONFIRMED_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.confirmedList.size()));
          for (int _iter6 : struct.confirmedList)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.radarNumber != null) {
        oprot.writeFieldBegin(RADAR_NUMBER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.radarNumber.size()));
          for (int _iter7 : struct.radarNumber)
          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataBlockTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DataBlockTupleScheme getScheme() {
      return new DataBlockTupleScheme();
    }
  }

  private static class DataBlockTupleScheme extends org.apache.thrift.scheme.TupleScheme<DataBlock> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataBlock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetConfirmedList()) {
        optionals.set(1);
      }
      if (struct.isSetRadarNumber()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetConfirmedList()) {
        {
          oprot.writeI32(struct.confirmedList.size());
          for (int _iter8 : struct.confirmedList)
          {
            oprot.writeI32(_iter8);
          }
        }
      }
      if (struct.isSetRadarNumber()) {
        {
          oprot.writeI32(struct.radarNumber.size());
          for (int _iter9 : struct.radarNumber)
          {
            oprot.writeI32(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataBlock struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.confirmedList = new java.util.ArrayList<java.lang.Integer>(_list10.size);
          int _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readI32();
            struct.confirmedList.add(_elem11);
          }
        }
        struct.setConfirmedListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.radarNumber = new java.util.ArrayList<java.lang.Integer>(_list13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.radarNumber.add(_elem14);
          }
        }
        struct.setRadarNumberIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

