/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.test.thrift.data;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-16")
public class Movie implements org.apache.thrift.TBase<Movie, Movie._Fields>, java.io.Serializable, Cloneable, Comparable<Movie> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Movie");

  private static final org.apache.thrift.protocol.TField MOVIE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("movieName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMMENT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("commentNumber", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MOVIE_STARS_FIELD_DESC = new org.apache.thrift.protocol.TField("movieStars", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MovieStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MovieTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String movieName; // required
  public int commentNumber; // required
  public double movieStars; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MOVIE_NAME((short)1, "movieName"),
    COMMENT_NUMBER((short)2, "commentNumber"),
    MOVIE_STARS((short)3, "movieStars");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MOVIE_NAME
          return MOVIE_NAME;
        case 2: // COMMENT_NUMBER
          return COMMENT_NUMBER;
        case 3: // MOVIE_STARS
          return MOVIE_STARS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMENTNUMBER_ISSET_ID = 0;
  private static final int __MOVIESTARS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MOVIE_NAME, new org.apache.thrift.meta_data.FieldMetaData("movieName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("commentNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOVIE_STARS, new org.apache.thrift.meta_data.FieldMetaData("movieStars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Movie.class, metaDataMap);
  }

  public Movie() {
  }

  public Movie(
    java.lang.String movieName,
    int commentNumber,
    double movieStars)
  {
    this();
    this.movieName = movieName;
    this.commentNumber = commentNumber;
    setCommentNumberIsSet(true);
    this.movieStars = movieStars;
    setMovieStarsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Movie(Movie other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMovieName()) {
      this.movieName = other.movieName;
    }
    this.commentNumber = other.commentNumber;
    this.movieStars = other.movieStars;
  }

  public Movie deepCopy() {
    return new Movie(this);
  }

  @Override
  public void clear() {
    this.movieName = null;
    setCommentNumberIsSet(false);
    this.commentNumber = 0;
    setMovieStarsIsSet(false);
    this.movieStars = 0.0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMovieName() {
    return this.movieName;
  }

  public Movie setMovieName(@org.apache.thrift.annotation.Nullable java.lang.String movieName) {
    this.movieName = movieName;
    return this;
  }

  public void unsetMovieName() {
    this.movieName = null;
  }

  /** Returns true if field movieName is set (has been assigned a value) and false otherwise */
  public boolean isSetMovieName() {
    return this.movieName != null;
  }

  public void setMovieNameIsSet(boolean value) {
    if (!value) {
      this.movieName = null;
    }
  }

  public int getCommentNumber() {
    return this.commentNumber;
  }

  public Movie setCommentNumber(int commentNumber) {
    this.commentNumber = commentNumber;
    setCommentNumberIsSet(true);
    return this;
  }

  public void unsetCommentNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENTNUMBER_ISSET_ID);
  }

  /** Returns true if field commentNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENTNUMBER_ISSET_ID);
  }

  public void setCommentNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENTNUMBER_ISSET_ID, value);
  }

  public double getMovieStars() {
    return this.movieStars;
  }

  public Movie setMovieStars(double movieStars) {
    this.movieStars = movieStars;
    setMovieStarsIsSet(true);
    return this;
  }

  public void unsetMovieStars() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MOVIESTARS_ISSET_ID);
  }

  /** Returns true if field movieStars is set (has been assigned a value) and false otherwise */
  public boolean isSetMovieStars() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MOVIESTARS_ISSET_ID);
  }

  public void setMovieStarsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MOVIESTARS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MOVIE_NAME:
      if (value == null) {
        unsetMovieName();
      } else {
        setMovieName((java.lang.String)value);
      }
      break;

    case COMMENT_NUMBER:
      if (value == null) {
        unsetCommentNumber();
      } else {
        setCommentNumber((java.lang.Integer)value);
      }
      break;

    case MOVIE_STARS:
      if (value == null) {
        unsetMovieStars();
      } else {
        setMovieStars((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MOVIE_NAME:
      return getMovieName();

    case COMMENT_NUMBER:
      return getCommentNumber();

    case MOVIE_STARS:
      return getMovieStars();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MOVIE_NAME:
      return isSetMovieName();
    case COMMENT_NUMBER:
      return isSetCommentNumber();
    case MOVIE_STARS:
      return isSetMovieStars();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Movie)
      return this.equals((Movie)that);
    return false;
  }

  public boolean equals(Movie that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_movieName = true && this.isSetMovieName();
    boolean that_present_movieName = true && that.isSetMovieName();
    if (this_present_movieName || that_present_movieName) {
      if (!(this_present_movieName && that_present_movieName))
        return false;
      if (!this.movieName.equals(that.movieName))
        return false;
    }

    boolean this_present_commentNumber = true;
    boolean that_present_commentNumber = true;
    if (this_present_commentNumber || that_present_commentNumber) {
      if (!(this_present_commentNumber && that_present_commentNumber))
        return false;
      if (this.commentNumber != that.commentNumber)
        return false;
    }

    boolean this_present_movieStars = true;
    boolean that_present_movieStars = true;
    if (this_present_movieStars || that_present_movieStars) {
      if (!(this_present_movieStars && that_present_movieStars))
        return false;
      if (this.movieStars != that.movieStars)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMovieName()) ? 131071 : 524287);
    if (isSetMovieName())
      hashCode = hashCode * 8191 + movieName.hashCode();

    hashCode = hashCode * 8191 + commentNumber;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(movieStars);

    return hashCode;
  }

  @Override
  public int compareTo(Movie other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMovieName()).compareTo(other.isSetMovieName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMovieName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.movieName, other.movieName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommentNumber()).compareTo(other.isSetCommentNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentNumber, other.commentNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMovieStars()).compareTo(other.isSetMovieStars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMovieStars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.movieStars, other.movieStars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Movie(");
    boolean first = true;

    sb.append("movieName:");
    if (this.movieName == null) {
      sb.append("null");
    } else {
      sb.append(this.movieName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentNumber:");
    sb.append(this.commentNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("movieStars:");
    sb.append(this.movieStars);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MovieStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MovieStandardScheme getScheme() {
      return new MovieStandardScheme();
    }
  }

  private static class MovieStandardScheme extends org.apache.thrift.scheme.StandardScheme<Movie> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Movie struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MOVIE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.movieName = iprot.readString();
              struct.setMovieNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMENT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentNumber = iprot.readI32();
              struct.setCommentNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOVIE_STARS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.movieStars = iprot.readDouble();
              struct.setMovieStarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Movie struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.movieName != null) {
        oprot.writeFieldBegin(MOVIE_NAME_FIELD_DESC);
        oprot.writeString(struct.movieName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMMENT_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.commentNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOVIE_STARS_FIELD_DESC);
      oprot.writeDouble(struct.movieStars);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MovieTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MovieTupleScheme getScheme() {
      return new MovieTupleScheme();
    }
  }

  private static class MovieTupleScheme extends org.apache.thrift.scheme.TupleScheme<Movie> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Movie struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMovieName()) {
        optionals.set(0);
      }
      if (struct.isSetCommentNumber()) {
        optionals.set(1);
      }
      if (struct.isSetMovieStars()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMovieName()) {
        oprot.writeString(struct.movieName);
      }
      if (struct.isSetCommentNumber()) {
        oprot.writeI32(struct.commentNumber);
      }
      if (struct.isSetMovieStars()) {
        oprot.writeDouble(struct.movieStars);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Movie struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.movieName = iprot.readString();
        struct.setMovieNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commentNumber = iprot.readI32();
        struct.setCommentNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.movieStars = iprot.readDouble();
        struct.setMovieStarsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

